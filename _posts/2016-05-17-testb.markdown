---
layout: post
title:  "testb"
date:   2016-05-17 00:00:00
---

<style>

#example {
  font: 12px sans-serif;
  color: blue;
}
.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}
.bar {
  fill: #402824;
  font-weight: 900;
}
.xaxislabels {
  fill: #402824;
}
.x.axis path {
  display: none;
}
.x.axis {
    color: blue;
}
</style>
<body>
  <div id="example"></div>
<script src="https://d3js.org/d3.v3.min.js" charset="utf-8"></script>
<script>
var margin = {top: 20, right: 20, bottom: 50, left: 40},
    width = 960 - margin.left - margin.right,
    height = 600 - margin.top - margin.bottom;
var negWidth = width * -1;
var posWidth = width * 0.5;
var x0 = d3.scale.ordinal()
    .rangeRoundBands([0, width], .1);
var x1 = d3.scale.ordinal();
var y = d3.scale.linear()
    .range([height, 0]);
var color = d3.scale.ordinal()
    .range(["#FFA08F",  "#5E83CC",   "#40B282"]);
var xAxis = d3.svg.axis()
    .scale(x0)
    .orient("bottom");
var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(d3.format(".1s"));
var svg = d3.select("#example").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
d3.csv("/New folder/datamv.csv", function(error, data) {
  if (error) throw error;
  var ageNames = d3.keys(data[0]).filter(function(key) { return key !== "RegionName"; });
  data.forEach(function(d) {
    d.ages = ageNames.map(function(name) { return {name: name, value: +d[name]}; });
  });
  x0.domain(data.map(function(d) { return d.RegionName; }));
  x1.domain(ageNames).rangeRoundBands([0, x0.rangeBand()]);
  var d3Min =    d3.min(data, function (d) {
      return d3.min(d.ages, function (d) {
          return d.value;
      });
  });
  var  d3Max =  d3.max(data, function (d) {
          return d3.max(d.ages, function (d) {
              return d.value;
          });
      });
     y.domain([ d3Min,d3Max ]);
     var xAxisTransform =  height;
     if(d3Min < 0 && 0 < d3Max) {
         xAxisTransform = height * (d3Max / (d3Max -d3Min));
     }
     svg.append("g")
           .attr("class", "y axis")
           .attr("transform", "translate(0," + xAxisTransform + ")") // this line moves x-axis
           .call(xAxis)
           .selectAll("text")
           .attr("y", 0)
           .attr("x",5)
           .attr("transform", "rotate(80)")
           .attr("class", "xaxislabels")
           .style("text-anchor", "start");
     svg.append("g")
           .attr("class", "y axis")
           .call(yAxis)
           .append("text")
           .attr("transform", "rotate(-90)")
           .attr("y", 10)
           .attr("dy", ".71em")
           .style("text-anchor", "end")
           .text("Percent Change");
  var state = svg.selectAll(".state")
      .data(data)
    .enter().append("g")
      .attr("class", "state")
      .attr("transform", function(d) { return "translate(" + x0(d.RegionName) + ",0)"; });
      state.selectAll("rect")
            .data(function (d) {
                return d.ages;
            })
            .enter().append("rect")
            .attr("width", x1.rangeBand())
            .attr("x", function (d) {
                return x1(d.name);
            })
            .attr("y", function (d) {
                if(d.value < 0)
                    return y(0);
                return y(d.value);
            })
            .attr("height", function (d) {
                if(d.value < 0) {
                     return y(d.value+d3Max);
                }
                return height - y(d.value+d3Min);
            })
            .style("fill", function (d) {
                return color(d.name);
            });
      state.selectAll("text")
        .data(function(d) { return d.ages; })
      .enter().append("text")
       .attr("x", function(d) { return y(d.value); })
       .attr("y", function(d) { return -x1(d.name); })
        .attr("transform", "rotate(90)")
        .attr("text-anchor", "start")
        .attr("class","bar" )
        .text(function(d, i) { return d.value + "%"; });
  var legend = svg.selectAll(".legend")
      .data(ageNames.slice().reverse())
    .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });
  legend.append("rect")
      .attr("x", width - 18)
      .attr("width", 18)
      .attr("height", 18)
      .style("fill", color);
  legend.append("text")
      .attr("x", width - 24)
      .attr("y", 9)
      .attr("dy", ".35em")
      .style("text-anchor", "end")
      .text(function(d) { return d; });
});
</script>

<p>
This D3.js example shows viewership of the Real Housewives of Beverly Hills in millions, by season and by episode (along with the embarassing fact that I'm a big enough fan of this show to create this chart, having watched all episodes of all six seasons). Episodes are shown along the x-axis, and views are shown along the y-axis, with each line representing one of the six seasons. Some seasons had fewer episodes than others, and in those cases, the average views were used rather than null values. (Average values were used for Season 1, Episodes 18-23; Season 3, Episodes 23; and Season 6, episode 23 tbd). I removed Episode 24 since this was only shown during Season 2. Season 2 had the highest average viewrship at 2.2 million, and Season 6 has had the lowest average viewership so far, excluding the final episode which is TBD, with 1.8 million households watching.
</p>
<p>
The final episode of Season 6 aired last night, and during the reunion, there was controversy over a cast member possibly angling other cast members to create a more interesting storyline (probably to generate more views). I've read that the viewership has been declining, and I wanted to see what that looked like. This data is from Nielsen ratings' Live viewing (after doing some research, I believe Live ratings include TV and DVR playback on the same day, from 3am-3am. Also from Nielsen, Live viewing, "...ratings are the percentage of TV homes in the U.S. tuned into television." I'm not an expert on tv ratings, but it looks like this dataset does not take into account cross-platorm views, and since more and more people are watching tv shows on their computers and phones, I wonder if this has a signficant effect on the decline in these numbers.
</p>
